# Aggressive fix - force react-scripts installation
FROM node:16-alpine AS builder

WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++ bash

# Copy package files
COPY package*.json ./

# AGGRESSIVE: Clear cache and force clean install
RUN npm cache clean --force && \
    rm -rf node_modules package-lock.json

# Install dependencies with verbose logging
RUN echo "=== Installing ALL dependencies ===" && \
    npm install --legacy-peer-deps --verbose 2>&1 | tee /tmp/npm-install.log

# DEBUG: Check if react-scripts was installed
RUN echo "=== Checking react-scripts installation ===" && \
    ls -la node_modules/.bin/ | grep react || echo "NO REACT BINARIES" && \
    ls -la node_modules/react-scripts/ || echo "NO REACT-SCRIPTS DIRECTORY" && \
    npm ls react-scripts || echo "NOT IN DEPENDENCY TREE"

# FORCE: Install react-scripts directly if missing
RUN if [ ! -f node_modules/.bin/react-scripts ]; then \
        echo "=== FORCE INSTALLING react-scripts ===" && \
        npm install react-scripts@5.0.1 --save --legacy-peer-deps --verbose; \
    fi

# VERIFY: Final check
RUN echo "=== FINAL VERIFICATION ===" && \
    ls -la node_modules/.bin/react-scripts && \
    node_modules/.bin/react-scripts --version

# Copy source code
COPY . .

# Build arguments
ARG REACT_APP_API_URL
ENV REACT_APP_API_URL=$REACT_APP_API_URL

# MANUAL BUILD: Use direct path to react-scripts
RUN echo "=== MANUAL BUILD PROCESS ===" && \
    echo "Using direct path to react-scripts..." && \
    ./node_modules/.bin/react-scripts build

# Verify build output
RUN echo "=== BUILD VERIFICATION ===" && \
    ls -la build/ && \
    ls -la build/static/

# Production stage
FROM nginx:alpine

COPY --from=builder /app/build /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]