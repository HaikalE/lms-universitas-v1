# Alternative robust Dockerfile using Yarn
FROM node:16-alpine AS builder

WORKDIR /app

# Install build dependencies and yarn
RUN apk add --no-cache python3 make g++ curl bash && \
    npm install -g yarn@1.22.19

# Copy package files
COPY package*.json ./

# Generate yarn.lock if not exists, then install
RUN if [ ! -f yarn.lock ]; then \
        echo "Generating yarn.lock..." && \
        yarn install --frozen-lockfile=false; \
    else \
        yarn install --frozen-lockfile; \
    fi

# Verify react-scripts installation
RUN echo "=== Verifying react-scripts with yarn ===" && \
    yarn list react-scripts && \
    ls -la node_modules/.bin/react-scripts && \
    chmod +x node_modules/.bin/react-scripts

# Copy source code
COPY . .

# Build arguments
ARG REACT_APP_API_URL
ENV REACT_APP_API_URL=$REACT_APP_API_URL

# Add PATH
ENV PATH="/app/node_modules/.bin:$PATH"

# Build with yarn
RUN echo "=== Building with yarn ===" && \
    which react-scripts && \
    react-scripts --version && \
    yarn build

# Production stage
FROM nginx:alpine AS production

COPY --from=builder /app/build /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf

RUN addgroup -g 1001 -S nginx-user && \
    adduser -S nginx-user -u 1001

RUN chown -R nginx-user:nginx-user /var/cache/nginx && \
    chown -R nginx-user:nginx-user /var/log/nginx && \
    chown -R nginx-user:nginx-user /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginx-user:nginx-user /var/run/nginx.pid

USER nginx-user

EXPOSE 80

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1

CMD ["nginx", "-g", "daemon off;"]