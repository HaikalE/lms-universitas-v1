# Alternative Dockerfile using Yarn instead of npm
FROM node:18-alpine AS builder-yarn

WORKDIR /app

# Install build dependencies and yarn
RUN apk add --no-cache python3 make g++ curl && \
    ln -sf python3 /usr/bin/python && \
    npm install -g yarn

# Copy package files
COPY package*.json ./

# Install dependencies with yarn (more reliable than npm)
RUN yarn install --frozen-lockfile --network-timeout 100000

# Copy source code
COPY . .

# Build arguments
ARG REACT_APP_API_URL
ENV REACT_APP_API_URL=$REACT_APP_API_URL

# Build with yarn
RUN yarn build

# Production stage remains the same
FROM nginx:alpine AS production

COPY --from=builder-yarn /app/build /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf

RUN addgroup -g 1001 -S nginx-user && \
    adduser -S nginx-user -u 1001

RUN chown -R nginx-user:nginx-user /var/cache/nginx && \
    chown -R nginx-user:nginx-user /var/log/nginx && \
    chown -R nginx-user:nginx-user /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginx-user:nginx-user /var/run/nginx.pid

USER nginx-user

EXPOSE 80

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1

CMD ["nginx", "-g", "daemon off;"]