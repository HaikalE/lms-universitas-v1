-- ðŸ”¥ EMERGENCY SQL FIX for Week 11 Attendance
-- Use this if API manual trigger doesn't work

-- =====================================
-- PART 1: VERIFY CURRENT STATE
-- =====================================

-- Check current video progress for Week 11
SELECT 
    vp.id,
    vp."materialId",
    vp."studentId", 
    vp."watchedPercentage",
    vp."isCompleted",
    vp."hasTriggeredAttendance",
    vp."completedAt",
    cm.title,
    cm.week,
    cm."isAttendanceTrigger",
    cm."attendanceThreshold"
FROM video_progress vp
JOIN course_materials cm ON vp."materialId" = cm.id
WHERE cm.week = 11 
  AND cm."isAttendanceTrigger" = true
  AND vp."isCompleted" = true
ORDER BY vp."studentId", cm."orderIndex";

-- Check current attendance records for Week 11
SELECT 
    a.id,
    a."studentId",
    a."courseId", 
    a.status,
    a."submittedAt",
    a."isAutoGenerated",
    a.week,
    u."fullName",
    u."studentId" as student_number
FROM attendances a
JOIN users u ON a."studentId" = u.id
WHERE a.week = 11
ORDER BY a."studentId";

-- =====================================
-- PART 2: MANUAL ATTENDANCE CREATION
-- =====================================

-- Create attendance record for student who completed Week 11 videos
-- Replace the IDs with actual values from your system

-- For student: munir (407bbc2d-3f5a-4314-ab68-26cdfcf15192)
-- Course: Algoritma (2024ece7-edc2-4f75-bdd2-e605512f4ac7)

INSERT INTO attendances (
    id,
    "studentId",
    "courseId",
    week,
    status,
    "submittedAt",
    "isAutoGenerated",
    "triggerMaterialId",
    metadata,
    "createdAt",
    "updatedAt"
) VALUES (
    gen_random_uuid(), -- Generate random UUID
    '407bbc2d-3f5a-4314-ab68-26cdfcf15192', -- Student ID: munir
    '2024ece7-edc2-4f75-bdd2-e605512f4ac7', -- Course ID: Algoritma
    11, -- Week 11
    'present',
    NOW(),
    true, -- Auto-generated
    'b4283028-cc52-42c9-8b7c-f30367deafd6', -- Trigger material (video 1)
    json_build_object(
        'videoProgress', 100,
        'completionTime', NOW(),
        'weeklyCompletion', json_build_object(
            'week', 11,
            'totalRequired', 2,
            'completedCount', 2,
            'weeklyCompletionRate', 100,
            'fixedManually', true,
            'reason', 'Week 11 attendance fix - both videos completed 100%'
        )
    ),
    NOW(),
    NOW()
) ON CONFLICT DO NOTHING; -- Prevent duplicate if already exists

-- =====================================
-- PART 3: MARK VIDEOS AS TRIGGERED
-- =====================================

-- Mark both Week 11 videos as hasTriggeredAttendance = true
UPDATE video_progress 
SET 
    "hasTriggeredAttendance" = true,
    "updatedAt" = NOW()
WHERE "materialId" IN (
    SELECT cm.id 
    FROM course_materials cm 
    WHERE cm.week = 11 
      AND cm."isAttendanceTrigger" = true
      AND cm."courseId" = '2024ece7-edc2-4f75-bdd2-e605512f4ac7'
) 
AND "studentId" = '407bbc2d-3f5a-4314-ab68-26cdfcf15192'
AND "isCompleted" = true;

-- =====================================
-- PART 4: VERIFICATION QUERIES
-- =====================================

-- Verify attendance was created
SELECT 
    'ATTENDANCE CREATED' as status,
    a.*,
    u."fullName",
    u."studentId" as student_number,
    c.name as course_name
FROM attendances a
JOIN users u ON a."studentId" = u.id
JOIN courses c ON a."courseId" = c.id
WHERE a.week = 11 
  AND a."studentId" = '407bbc2d-3f5a-4314-ab68-26cdfcf15192';

-- Verify videos marked as triggered
SELECT 
    'VIDEOS TRIGGERED' as status,
    vp.id,
    vp."materialId",
    vp."hasTriggeredAttendance",
    cm.title,
    cm.week
FROM video_progress vp
JOIN course_materials cm ON vp."materialId" = cm.id
WHERE cm.week = 11 
  AND vp."studentId" = '407bbc2d-3f5a-4314-ab68-26cdfcf15192'
  AND cm."isAttendanceTrigger" = true;

-- Check weekly attendance summary for Week 11
SELECT 
    'WEEKLY SUMMARY' as status,
    11 as week,
    COUNT(DISTINCT a."studentId") as students_present,
    COUNT(DISTINCT u.id) as total_students,
    ROUND(
        COUNT(DISTINCT a."studentId")::numeric / COUNT(DISTINCT u.id) * 100, 
        1
    ) as attendance_rate_percent
FROM users u
CROSS JOIN courses c
LEFT JOIN attendances a ON a."studentId" = u.id 
    AND a."courseId" = c.id 
    AND a.week = 11
    AND a.status = 'present'
WHERE u.role = 'student'
  AND c.id = '2024ece7-edc2-4f75-bdd2-e605512f4ac7';

-- =====================================
-- PART 5: CLEANUP (OPTIONAL)
-- =====================================

-- If you need to reset and try again, use these queries:

-- Reset attendance (CAREFUL - this deletes the attendance record)
/*
DELETE FROM attendances 
WHERE week = 11 
  AND "studentId" = '407bbc2d-3f5a-4314-ab68-26cdfcf15192'
  AND "isAutoGenerated" = true;
*/

-- Reset video trigger status (CAREFUL - this resets trigger status)
/*
UPDATE video_progress 
SET "hasTriggeredAttendance" = false
WHERE "materialId" IN (
    SELECT cm.id 
    FROM course_materials cm 
    WHERE cm.week = 11 AND cm."isAttendanceTrigger" = true
) 
AND "studentId" = '407bbc2d-3f5a-4314-ab68-26cdfcf15192';
*/

-- =====================================
-- EXECUTION NOTES
-- =====================================

/*
TO EXECUTE THIS FIX:

1. Connect to your PostgreSQL database
2. Execute PART 1 to verify current state
3. Execute PART 2 to create attendance record
4. Execute PART 3 to mark videos as triggered
5. Execute PART 4 to verify success

Expected Results:
- 1 attendance record created for Week 11
- 2 video progress records marked as hasTriggeredAttendance = true
- Weekly attendance summary shows 1 student present for Week 11

If something goes wrong:
- Use PART 5 cleanup queries to reset
- Check the specific UUIDs match your system
- Verify course and student IDs are correct
*/